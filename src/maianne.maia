#!/usr/bin/env maiascript

///
/// @license
/// Copyright 2020 Roberto Luiz Souza Monteiro,
///                Renata Souza Barreto,
///                Hernane Borges de Barros Pereira.
///
/// Licensed under the Apache License, Version 2.0 (the "License")
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, eitherMath.express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///

///
/// MaiaApp core class.
/// @namespace
///
namespace maiaApp {
    appTitle = "MaiaNNE"
    appName = "maianne"
    scriptPath = "./"
    cnaLibrary = this.scriptPath + "/maia/cna/cna.maia"

    // Interpret the options passed on the command line,
    // process the files and generate the requested reports.
    function run() {
        // Supports only the Node.js interpreter.
        if (core.type(process) != "undefined") {
            command = "node"
            
            fs = system.require("fs")

            realPath = fs.realpathSync(system.argv[0])
            filePath = realPath.split("/")
            filePath = core.slice(filePath, 0, filePath.length - 2)
            filePath = filePath.join("/")
            this.scriptPath = filePath
            this.cnaLibrary = this.scriptPath + "/maia/cna/cna.maia"
            system.source(this.cnaLibrary)
            
            readTextFile = fs.readFileSync

            // Read file callback.
            function readFile(input) {
                content = readTextFile(input, "utf-8")
                return(content)
            }
            
            // Callback.
            function trainingCallback(epochs, RSS, correctness, ETL) {
                system.println(epochs + "," + RSS + "," + correctness + "," + ETL)
            }
            
            // Command line options.
            inputFile = ""
            outputFile = ""
            createANN = false
            topology = "mlp"
            vertices = 0
            edges = 0
            probability = 0
            avgdeg = 0
            ni = 0
            no = 0
            nl = 0
            nhu = 0
            
            // Get command line arguments.
            if (system.argc > 1) {
                i = 1
                while (i < system.argc) {
                    if ((system.argv[i] == "-h") | (system.argv[i] == "--help")) {
                        system.log(this.appTitle + " Command Line Interface (CLI)")
                        system.log("Usage: " + this.appName + " [options] [input file] [--] [arguments]")
                        system.log("Options:")
                        system.log("-h     --help               Displays this help message;")
                        system.log("-o     [output file]        Output file name.")
                        system.log("       --create.            Create an artificial neural network.")
                        system.log("       --topology.          Create an artificial neural network.")
                        system.log("       --vertices.          Number of vertices.")
                        system.log("       --edges.             Number of edges.")
                        system.log("       --probability.       Edge probability.")
                        system.log("       --avgdeg.            Average degree.")
                        system.log("       --ni.                Number of input neurons.")
                        system.log("       --no.                Number of output neurons.")
                        system.log("       --nl.                Number of layers")
                        system.log("       --nhu.               Number of hidden units.")
                        process.exit(0)
                    } elseif (system.argv[i] == "-o") {
                        i = i + 1
                        outputFile = system.argv[i]
                    } elseif (system.argv[i] == "--create") {
                        createANN = true
                    } elseif (system.argv[i] == "--create") {
                        createANN = true
                    } elseif (system.argv[i] == "--topology") {
                        i = i + 1
                        topology = system.argv[i]
                    } elseif (system.argv[i] == "--vertices") {
                        i = i + 1
                        vertices = system.argv[i]
                    } elseif (system.argv[i] == "--edges") {
                        i = i + 1
                        edges = system.argv[i]
                    } elseif (system.argv[i] == "--probability") {
                        i = i + 1
                        probability = system.argv[i]
                    } elseif (system.argv[i] == "--avgdeg") {
                        i = i + 1
                        avgdeg = system.argv[i]
                    } elseif (system.argv[i] == "--ni") {
                        i = i + 1
                        ni = system.argv[i]
                    } elseif (system.argv[i] == "--no") {
                        i = i + 1
                        no = system.argv[i]
                    } elseif (system.argv[i] == "--nl") {
                        i = i + 1
                        nl = system.argv[i]
                    } elseif (system.argv[i] == "--nhu") {
                        i = i + 1
                        nhu = system.argv[i]
                    } else {
                        inputFile = system.argv[i]
                        break
                    }
                    i = i + 1
                }

                if (inputFile != "") {
                    local Glob = system.require("glob")
                    // Process each file based on glob pattern.
                    function processFiles(er, files) {
                        if (files.length == 0) {
                            system.log(this.appTitle + " Command Line Interface (CLI)")
                            system.log("Usage: " + this.appName + " [options] [input file] [--] [arguments]")
                        } else {
                            for (i = 0; i < files.length; i = i + 1) {
                                // Get the full file name.
                                file = files[i]
                                
                                // Get the file without extension.
                                fileName = file.split(".")
                                fileName = fileName.shift()

                                // Get the file name extension.
                                fileExtension = file.split(".")
                                fileExtension = fileExtension.pop()

                                // Read the file contents.
                                fileContents = readFile(String(file))

                                // Do something...

                                // Sets the output file.
                                if (outputFile == "") {
                                    outputFile = fileName + ".out"
                                }

                                // Write something to the output file.
                                function errorCallback(err) {
                                    if (err) {
                                        throw(err)
                                    }
                                }
                                fs.writeFile(outputFile, fileContents, errorCallback)
                            }
                        }
                    }

                    options = []

                    // Get all file names based on glob pattern.
                    local glob := Glob(inputFile, options, processFiles)
                } else {
                    if (createANN) {
                        property = {
                            "adj": [],
                            "n": 0,
                            "m": 0,
                            "directed": false,
                            "density": 0,
                            "networkLabel": [],
                            "networkDegree": [],
                            "networkAverageDegree": 0,
                            "networkDegreeDistribution": [],
                            "networkDensity": 0,
                            "networkClustering": [],
                            "networkAverageClustering": 0,
                            "networkShortestPath": [],
                            "networkAverageShortestPath": 0,
                            "networkDiameter": 0,
                            "networkCentrality": [],
                            "networkVertexEfficiency": [],
                            "networkGlobalEfficiency": 0
                        }
                        property.adj = ann.createANN(topology, vertices, edges, probability, avgdeg, ni, no, nl, nhu)
                        fileContents = global.cna.createPajekFile(property.adj, "arcs")

                        // Sets the output file.
                        if (outputFile == "") {
                            outputFile = "output.net"
                        }

                        // Write something to the output file.
                        function errorCallback(err) {
                            if (err) {
                                throw(err)
                            }
                        }
                        fs.writeFile(outputFile, fileContents, errorCallback)
                    } else {
                        system.log(this.appTitle + " Command Line Interface (CLI)")
                        system.log("Usage: " + this.appName + " [options] [input file] [--] [arguments]")
                    }
                }
            } else {
                system.log(this.appTitle + " Command Line Interface (CLI)")
                system.log("Usage: " + this.appName + " [options] [input file] [--] [arguments]")
            }
        }
    }
}

// Run the MaiaApp code if this script has been invoked
// from the command line.
if (core.type(process) != "undefined") {
    maiaApp.run()
}